type Club {
  id: ID!
  created_at: DateTime!
  updated_at: DateTime!
  name: String
  leagues(sort: String, limit: Int, start: Int, where: JSON): [League]
}

input ClubInput {
  name: String
  leagues: [ID]
}

type Comment {
  id: ID!
  created_at: DateTime!
  updated_at: DateTime!
  body: String
  views: Int
  votes: Int
  user: UsersPermissionsUser
}

input CommentInput {
  body: String
  views: Int
  votes: Int
  user: ID
}

input createClubInput {
  data: ClubInput
}

type createClubPayload {
  club: Club
}

input createCommentInput {
  data: CommentInput
}

type createCommentPayload {
  comment: Comment
}

input createLeagueInput {
  data: LeagueInput
}

type createLeaguePayload {
  league: League
}

input createPageInput {
  data: PageInput
}

type createPagePayload {
  page: Page
}

input createPollInput {
  data: PollInput
}

type createPollPayload {
  poll: Poll
}

input createRoleInput {
  data: RoleInput
}

type createRolePayload {
  role: UsersPermissionsRole
}

input createTagInput {
  data: TagInput
}

type createTagPayload {
  tag: Tag
}

input createUserInput {
  data: UserInput
}

type createUserPayload {
  user: UsersPermissionsUser
}

"""
The `DateTime` scalar represents a date and time following the ISO 8601 standard
"""
scalar DateTime

input deleteClubInput {
  where: InputID
}

type deleteClubPayload {
  club: Club
}

input deleteCommentInput {
  where: InputID
}

type deleteCommentPayload {
  comment: Comment
}

input deleteLeagueInput {
  where: InputID
}

type deleteLeaguePayload {
  league: League
}

input deletePageInput {
  where: InputID
}

type deletePagePayload {
  page: Page
}

input deletePollInput {
  where: InputID
}

type deletePollPayload {
  poll: Poll
}

input deleteRoleInput {
  where: InputID
}

type deleteRolePayload {
  role: UsersPermissionsRole
}

input deleteTagInput {
  where: InputID
}

type deleteTagPayload {
  tag: Tag
}

input deleteUserInput {
  where: InputID
}

type deleteUserPayload {
  user: UsersPermissionsUser
}

input editClubInput {
  name: String
  leagues: [ID]
}

input editCommentInput {
  body: String
  views: Int
  votes: Int
  user: ID
}

input editFileInput {
  name: String
  hash: String
  sha256: String
  ext: String
  mime: String
  size: String
  url: String
  provider: String
  public_id: String
  related: [ID]
}

input editLeagueInput {
  name: String
  club: ID
  logo: ID
}

input editPageInput {
  title: String
  baner_bg: ID
  body: String
}

input editPollInput {
  title: String
  body: String
  votes: Int
  title_bg: ID
  user: ID
}

input editRoleInput {
  name: String
  description: String
  type: String
  permissions: [ID]
  users: [ID]
}

input editTagInput {
  name: String
}

input editUserInput {
  username: String
  email: String
  provider: String
  password: String
  resetPasswordToken: String
  confirmed: Boolean
  blocked: Boolean
  role: ID
  nickname: String
  polls: [ID]
  comments: [ID]
}

input FileInput {
  name: String!
  hash: String!
  sha256: String
  ext: String
  mime: String!
  size: String!
  url: String!
  provider: String!
  public_id: String
  related: [ID]
}

input InputID {
  id: ID!
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON

type League {
  id: ID!
  created_at: DateTime!
  updated_at: DateTime!
  name: String
  club: Club
  logo: UploadFile
}

input LeagueInput {
  name: String
  club: ID
  logo: ID
}

union Morph = UsersPermissionsMe | UsersPermissionsMeRole | Club | createClubPayload | updateClubPayload | deleteClubPayload | Comment | createCommentPayload | updateCommentPayload | deleteCommentPayload | League | createLeaguePayload | updateLeaguePayload | deleteLeaguePayload | Page | createPagePayload | updatePagePayload | deletePagePayload | Poll | createPollPayload | updatePollPayload | deletePollPayload | Tag | createTagPayload | updateTagPayload | deleteTagPayload | UploadFile | UsersPermissionsPermission | UsersPermissionsRole | createRolePayload | updateRolePayload | deleteRolePayload | UsersPermissionsUser | createUserPayload | updateUserPayload | deleteUserPayload

type Mutation {
  createClub(input: createClubInput): createClubPayload
  updateClub(input: updateClubInput): updateClubPayload
  deleteClub(input: deleteClubInput): deleteClubPayload
  createComment(input: createCommentInput): createCommentPayload
  updateComment(input: updateCommentInput): updateCommentPayload
  deleteComment(input: deleteCommentInput): deleteCommentPayload
  createLeague(input: createLeagueInput): createLeaguePayload
  updateLeague(input: updateLeagueInput): updateLeaguePayload
  deleteLeague(input: deleteLeagueInput): deleteLeaguePayload
  createPage(input: createPageInput): createPagePayload
  updatePage(input: updatePageInput): updatePagePayload
  deletePage(input: deletePageInput): deletePagePayload
  createPoll(input: createPollInput): createPollPayload
  updatePoll(input: updatePollInput): updatePollPayload
  deletePoll(input: deletePollInput): deletePollPayload
  createTag(input: createTagInput): createTagPayload
  updateTag(input: updateTagInput): updateTagPayload
  deleteTag(input: deleteTagInput): deleteTagPayload

  """Create a new role"""
  createRole(input: createRoleInput): createRolePayload

  """Update an existing role"""
  updateRole(input: updateRoleInput): updateRolePayload

  """Delete an existing role"""
  deleteRole(input: deleteRoleInput): deleteRolePayload

  """Create a new user"""
  createUser(input: createUserInput): createUserPayload

  """Update an existing user"""
  updateUser(input: updateUserInput): updateUserPayload

  """Delete an existing user"""
  deleteUser(input: deleteUserInput): deleteUserPayload
  upload(refId: ID, ref: String, source: String, file: Upload!): UploadFile!
}

type Page {
  id: ID!
  created_at: DateTime!
  updated_at: DateTime!
  title: String
  baner_bg: UploadFile
  body: String
}

input PageInput {
  title: String
  baner_bg: ID
  body: String
}

type Poll {
  id: ID!
  created_at: DateTime!
  updated_at: DateTime!
  title: String!
  body: String
  votes: Int
  title_bg: UploadFile
  user: UsersPermissionsUser
}

input PollInput {
  title: String!
  body: String
  votes: Int
  title_bg: ID
  user: ID
}

type Query {
  club(id: ID!): Club
  clubs(sort: String, limit: Int, start: Int, where: JSON): [Club]
  comment(id: ID!): Comment
  comments(sort: String, limit: Int, start: Int, where: JSON): [Comment]
  league(id: ID!): League
  leagues(sort: String, limit: Int, start: Int, where: JSON): [League]
  page(id: ID!): Page
  pages(sort: String, limit: Int, start: Int, where: JSON): [Page]
  poll(id: ID!): Poll
  polls(sort: String, limit: Int, start: Int, where: JSON): [Poll]
  tag(id: ID!): Tag
  tags(sort: String, limit: Int, start: Int, where: JSON): [Tag]
  files(sort: String, limit: Int, start: Int, where: JSON): [UploadFile]
  role(id: ID!): UsersPermissionsRole

  """
  Retrieve all the existing roles. You can't apply filters on this query.
  """
  roles(sort: String, limit: Int, start: Int, where: JSON): [UsersPermissionsRole]
  user(id: ID!): UsersPermissionsUser
  users(sort: String, limit: Int, start: Int, where: JSON): [UsersPermissionsUser]
  me: UsersPermissionsMe
}

input RoleInput {
  name: String!
  description: String
  type: String
  permissions: [ID]
  users: [ID]
}

type Tag {
  id: ID!
  created_at: DateTime!
  updated_at: DateTime!
  name: String
}

input TagInput {
  name: String
}

input updateClubInput {
  where: InputID
  data: editClubInput
}

type updateClubPayload {
  club: Club
}

input updateCommentInput {
  where: InputID
  data: editCommentInput
}

type updateCommentPayload {
  comment: Comment
}

input updateLeagueInput {
  where: InputID
  data: editLeagueInput
}

type updateLeaguePayload {
  league: League
}

input updatePageInput {
  where: InputID
  data: editPageInput
}

type updatePagePayload {
  page: Page
}

input updatePollInput {
  where: InputID
  data: editPollInput
}

type updatePollPayload {
  poll: Poll
}

input updateRoleInput {
  where: InputID
  data: editRoleInput
}

type updateRolePayload {
  role: UsersPermissionsRole
}

input updateTagInput {
  where: InputID
  data: editTagInput
}

type updateTagPayload {
  tag: Tag
}

input updateUserInput {
  where: InputID
  data: editUserInput
}

type updateUserPayload {
  user: UsersPermissionsUser
}

"""The `Upload` scalar type represents a file upload."""
scalar Upload

type UploadFile {
  id: ID!
  created_at: DateTime!
  updated_at: DateTime!
  name: String!
  hash: String!
  sha256: String
  ext: String
  mime: String!
  size: String!
  url: String!
  provider: String!
  public_id: String
  related(sort: String, limit: Int, start: Int, where: JSON): [Morph]
}

input UserInput {
  username: String!
  email: String!
  provider: String
  password: String
  resetPasswordToken: String
  confirmed: Boolean
  blocked: Boolean
  role: ID
  nickname: String
  polls: [ID]
  comments: [ID]
}

type UsersPermissionsMe {
  _id: ID!
  username: String!
  email: String!
  confirmed: Boolean
  blocked: Boolean
  role: UsersPermissionsMeRole
}

type UsersPermissionsMeRole {
  _id: ID!
  name: String!
  description: String
  type: String
}

type UsersPermissionsPermission {
  id: ID!
  type: String!
  controller: String!
  action: String!
  enabled: Boolean!
  policy: String
  role: UsersPermissionsRole
}

type UsersPermissionsRole {
  id: ID!
  name: String!
  description: String
  type: String
  permissions(sort: String, limit: Int, start: Int, where: JSON): [UsersPermissionsPermission]
  users(sort: String, limit: Int, start: Int, where: JSON): [UsersPermissionsUser]
}

type UsersPermissionsUser {
  id: ID!
  username: String!
  email: String!
  provider: String
  confirmed: Boolean
  blocked: Boolean
  role: UsersPermissionsRole
  nickname: String
  polls(sort: String, limit: Int, start: Int, where: JSON): [Poll]
  comments(sort: String, limit: Int, start: Int, where: JSON): [Comment]
}
